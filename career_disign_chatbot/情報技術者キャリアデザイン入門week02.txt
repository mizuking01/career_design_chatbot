情報技術者、キャリアデザイン、第2週ですね。今日からITパスポート試験入門の授業を始めたいと思います。今週から3週間はマネジメントということで、ITパスポート試験入門のマネジメントの章を勉強します。

第5・6・7週は企業活動と法務，それから第8・9・10週は経営戦略とシステム戦略ということで、しばらくは教科書を使ってITパスポート試験の勉強をやりたいと思います。

このあたりは、ITパスポート試験の中でもマネジメント系、あるいはストラテジー系といわれる部分になります。どちらかというと技術的な話というよりは、戦略的な話が多く出てくるんじゃないかなと思います。

これまで皆さん方が勉強してきた内容とは、結構違う内容が出てくるんじゃないかなと思います。講義資料はこちらの方にアップしてあるんですけれども、開けてみますと、マインドマップの形で今日の授業内容を示してあります。

これは回転することができまして、こうするとちょうど横になるんですけれども、こんな感じでマネジメントの話は、企画要件定義プロセス、開発プロセス、テスト手法、運用保守プロセス。

これはソフトウェア開発の基本手順の話です。まずソフトウェアの開発手法ですが、歴史的にはウォーターフォールモデルというのがありましたが、最近はアジャイル開発、あるいはその他の開発手法、ここに出てますけどデブオプスみたいな技術が注目を集めています。

そういう話が、今のITパスポート試験の中では非常に重要な項目になっています。それからプロジェクトマネジメント、タイムマネジメント（時間の管理）、ITサービスマネジメント、システム監査といった内容になっています。「超重要」と書いてあるところは、

最近のITパスポート試験でよく出る部分になっていると考えてもらうといいかと思います。基本的にマネジメントとは何かと言いますと、様々な技術を効果的に活用する技術のことです。

技術を使うための技術ということで、少し分かりにくい部分があるかもしれませんが、話を聞いてもらうとその重要性が理解できるのではないかと思います。ということで、テキストを使って話を進めていきたいと思います。

では、皆さん方に購入してもらっているITパスポート試験入門のテキストを使用します。現在は第八章、マネジメントの話を始めたいと思います。

先ほども示したように、内容はかなりリッチです。なので、サクサク進めていきたいと考えています。最初は「企画要件定義」というところから話を始めたいと思います。ソフトウェア開発には、ソフトウェアライフサイクルプロセスというものがあります。

これはソフトウェアの企画、つまり何を作るかを最初に決める必要があるという話です。これが企画プロセス、あるいは要件定義の段階です。

どのようなソフトウェアを作ればよいかが決まったら、開発プロセスに移り、実際の開発がスタートします。その開発が終わったら、皆さんが行っているようなコンピュータープログラミングのレポートを出して終了、という流れになります。

しかし、実際の社会ではそこからが始まりです。開発が済んだからといって「出来上がった万歳！」というわけではありません。その出来上がったソフトウェアを使って、実際に運用していくことになります。例えば、皆さんは現在Zoomを使っていますよね。

Moodleも使っていますよね。ライブキャンパスを使って履修登録をしますよね。そういうふうに、実際のソフトウェアやサービスを使っているわけです。そこが運用になります。

使っているうちに、いろいろな不具合が見つかることもあります。そういった不具合が見つかった場合には、それを修正していきます。放っておくわけにはいかないので修正します。それを行うのが保守プロセスです。

ソフトウェアライフサイクルプロセス（SLCP）というのは、ソフトウェアの企画、要件定義、開発、運用、保守までの一連の活動のことを指します。

試験では、この五つのプロセスが出題されます。このソフトウェアライフサイクルプロセスに関するドキュメントはかなり厚いものですが、しっかり読むと、各プロセスで具体的にどのような作業を行う必要があるかが定められています。

このソフトウェアライフサイクルプロジェクトにおいて、同じ用語であっても、利用者と開発者の間で微妙な意味の取り違いやズレが生じると困ります。そうならないように、共通の言葉で仕事の内容を定義しましょう、ということで定義されているのが「共通フレーム」です。

この共通フレームは、ISOの規格（12207や15288）に基づいて、経済産業省が定義しています。それに基づいて作業を進める仕組みになっています。

まず、企画プロセスというのは、システム全体の構想や計画を策定するプロセスです。

この段階では、システム開発を進めるにあたって、どういう方向性で製品を作っていくのかという点が重要になります。この方向性が定まると、次に「要件定義プロセス」へと進みます。

ここでは、方向性を決めるだけでなく、具体的にどのような機能や性能が必要なのかをまとめていきます。この要件定義プロセスでは、機能や性能を明確にし、それをドキュメントにまとめていきます。

このようにまとめられたドキュメントは、「要件定義書」あるいは「仕様書」と呼ばれます。これはソフトウェア開発を行う際の「契約書」に準ずる重要な文書です。

通常、ソフトウェア開発を依頼したい側（依頼元）が要件定義書を作成し、それを用いてソフトウェア開発業者（ベンダー）に開発の依頼を行います。そして、ベンダーがその仕様に基づいて開発を行う、というのが一般的なパターンです。

このとき、「仕様書通りに作る」ということが非常に重要になります。つまり、要件定義の結果として作成される要件定義書や仕様書は、ソフトウェア開発において契約書と同等の扱いを受けるわけです。

依頼元とベンダーの関係について少し述べておくと、まず依頼元が「こういうソフトウェアを開発したい」と考えた場合、情報提供の依頼（RFI）を出します。それに対してベンダーが「こんなことができますよ」といった情報を提供します。

その後、どのようなことが可能かについて、提案書や見積書などが提出され、それをもとに「どこに依頼するか」を検討します。そして契約締結に至るわけですが、この段階で特に重要になるのが、提案書や見積書の内容になります。

提案書や見積書を比較・検討したうえで、「どのようなものを作るか」が決定され、それが「仕様書」として確定されるのです（この辺りの詳細はここには書かれていないかもしれません）。

こうして、企画や要件定義が行われ、それに基づいて契約が締結されると、その契約に従って業者によるシステム開発が始まります。ここからが、いわゆる「開発プロセス」となります。

開発プロセスで何をするかと言いますと、開発者が利用者の要件、これ仕様書に書いてある要件を取り入れながら、実際にシステムを開発していくわけです。なので、このシステムの要件定義のところの成果物を見ると、システム要件定義書などというのが書いてあります。

ソフトウェアの要件定義、このあたり、システムの要件定義とソフトウェアの要件定義って一体何が違うんやというふうに思う人の方が多分多いと思うんですけれども、システムっていうのは情報システム、サービスを提供する情報システムの全体を指します。

そういうシステムはですね、一つのソフトウェアで構成されている場合ももちろんあるわけなんですけれども、複数のソフトウェアとか、あるいは既存のシステムと連携をして実現されているっていうこともよくあるわけです。

そういう意味で、システムというのは、より小さな他のシステム、あるいはソフトウェアといったものが連携して作られているというふうにイメージしてもらいたいと思います。つまり、ソフトウェアというのはシステムの部品なんですね。

システムの要件定義をしたら、それを構成するソフトウェアの、特に今回開発を依頼したいソフトウェアの要件定義をしていく必要があります。既存のソフトウェアに関しては開発はもう済んでいるわけだから、その部分に関しては要件定義はいらないわけね。

という感じになります。ということで、そのシステムを構成するソフトウェアを明確にして、そのソフトウェアの中でも開発が必要な部分、必要なソフトウェアの要件を明確にしていくということが必要になっていくわけです。まずそういう要件定義をしまして、それで。


目的をどんなソフトウェアを作ればいいかというのを明確にします。それが済んだら、システム設計、ソフトウェア設計、ソフトウェアの構築、プログラミングという工程に進んでいくわけですね。要件定義が済まないと、何を作ればいいかという目的が定まりません。

だからシステム設計がスタートできないんですね。仕様書がまとまりました。そうすると、何をどこまでやればいいかというのが決まります。それを踏まえて、システム全体の構造を決めます。それからソフトウェア設計ということで、その開発対象のソフトウェアの構造を決めますというのが、システム設計とソフトウェア設計です。

どういう構造のシステム、あるいはどういう構造のソフトウェアを作ればいいかというのが決まったら、それに合わせてソフトウェアの構築、プログラミングという作業が始まるという段取りになっています。

なんかえらい面倒くさいことをやってるなというふうに思う人も多いんじゃないかと思いますけれども、なんでこんなふうになるかっていうと、今のソフトウェア、情報システム、あるいはソフトウェアっていうのは非常に規模が大きいんです。

皆さん方の大学の演習課題で書くプログラムっていうのは、50行とか100行とか200行。だいたいそのぐらいの規模のものでしかありませんけれども、プロが仕事で作るソフトウェアというのは、専業とか1万行というのはもう小規模な部類なんですよ。

十万行、百万行、百万行ぐらいで中規模かねと。1000万行とか1億行ぐらいになったら、「おお、これはなかなか大規模ソフトウェアだ」という、そんな感じの規模感なんです。むちゃくちゃサイズがでかいので、一人では到底作れません。

どうしても設計をやって、いくつかのコンポーネントに分割して、それぞれを違う担当者、あるいは違うチームが分担して開発していかないといけないわけです。

だからシステム設計とかソフトウェア設計っていうのが重要な作業になってくる。それをしないとソフトウェアのプログラミングに移れないということになるわけです。

さて、そうやってソフトウェアを作ったとしましょうと。

そのソフトウェアというのは、皆さん方が大学の授業でプログラムを書くときには、ともかく動けばいいや、ともかく動けばそれで単位をもらえるからいいやというノリかもしれませんけれども、プロはそうはいきません。プロは、完成したソフトウェアを誰かが使って、役に立ってくれないと、役に立って初めて意味があるのです。

役に立つというのは、いろんな要素を含むんですけれども、それを端的に表したのが、このソフトウェアの品質、品質特性というやつですね。内容を見てもらうとわかりますけれども、仕様書通りに操作ができて、正しく動作する。そうじゃなかったら困りますよね。

ソフトウェアの理解や習得がしやすいこと、必要な時に使用できて、故障時には速やかに回復できること、応答時間や処理時間などに求められる性能が備わっていること。十分に拘束されていることです。また、修正がしやすい、他の環境に移行しやすいといったようなことで、重要な特性がいろいろとあるわけです。

こういった品質特性をしっかり見出したソフトウェアを作るというのが、プロのソフトウェア技術者とアマチュアのソフトウェア技術者の大きな違いになっています。プロに頼んでプロのソフトウェア開発をやってもらうと、すごい高くつくんですよ。ソフトウェア技術者を一ヶ月雇うと、だいたい100万円ぐらいします。

そういう値段で、一人一ヶ月で100万円ですよ。だから一人一年雇ったら1000万ですよね。もしも十人を一年間雇ったら1億です。

みたいな感じで、ものすごく大きなお金がかかりますけれども、なんでそんなに高くなるかというと、こういうソフトウェアの品質特性をちゃんと満たしたようなソフトウェアを作る責任を負うからです。

さて、そうやってソフトウェアが無事出来上がりました。で、出来上がったら何をするかというと、さっき言っていた完成したソフトウェアが様々な品質特性を満たしているかどうかを確認しないといけないです。それをするのがテストです。

皆さん方がイメージするテストというのは、定期試験とかレポートとか、そういったものをイメージするかと思いますけれども、これは開発中のシステムやソフトウェアが、利用者の要件通り、仕様書通りに、あるいは開発者が設計した仕様通りに正しく動作するかを確認するものです。

ちなみに、ソフトウェアの規模はものすごく大きくて、何万行、何十万行、何百万行あるという話をさっきちょっとしましたよね。そのくらいの規模があると、バグが一切ないということは保証できません。

プログラムを書くのは人間ですから、その人間が一切ミスをしないということはありません。人間は必ずどこかでミスをする。これはほぼ常識なわけです。生身の人間ですからね。最近では、生成AIがプログラムを書いてくれるような時代になってきつつあります。

ただし、生成AIも間違いを犯すわけです。アルシネーションとかありますからね。でもそういう意味で、出来上がったプログラムが常に正しいと確信できるかというと、必ずしもそうじゃないわけです。基本的には、必ずバグはあるという前提を置くわけです。これがプロの世界では常識です。

必ずバグはある。しかし、このテストを通じて、そのバグをできるだけたくさん見つけ出して、事前に潰すことが必要です。それをするためにこのテストというものがあります。

テストの手法として、いろいろな種類があります。単体テスト、結合テスト、システムテスト、運用テスト、受け入れテストなど、いろんな種類のテストがあります。では、まず小さなところから見ていきましょう。プログラムを書くと、一番小さな単位が...

ここではモジュールと書いてありますけれども、皆さん方が知っている概念で言うと、サブルーチンです。サブルーチン単位でテストをして、まず正しい動作がないかを確認していきます。なので、すべての分岐をチェックするとか、すべての命令が実行されるようにテストデータを選ぶとか、そういった技術があります。

テストデータをうまく選んで、動作の誤りができるだけ少なくなるように、また、誤りをできるだけたくさん発見できるようにする技術もあります。時間の関係でここではその技術を紹介するだけにとどめますが、より詳しく知りたい方は、私が担当している情報系のコース「ソフトウェア工学」の授業を受けると、さらに詳しい話をしています。ホワイトボックステストもブラックボックステストも教えています。

それから、個別のサブルーチンが正しいと分かったら、複数のサブルーチンを組み合わせて、その全体が正しいかどうかを確認していきます。プログラム全体や、そのプログラム間の連携がうまくいっているかどうかをチェックし、誤りを探します。これを行うのがシステムテストや運用テストです。

最後に受け入れテストというのは、システム全体が最初に企画や要件定義をした通りに、またその趣旨をきちんと満たしているかどうか、満足しているかどうかを確認する最終的なテストです。

この受け入れテストを通過して初めて、開発完了となります。開発完了しないと、ソフトウェア開発のベンダーとしてはお金をもらえないという仕組みになっています。

なので、単体テストから始めて、結合テスト、システムテスト、運用テストと順次行われていきます。それら全てをパスしないといけないということで、プロのソフトウェア開発は非常に大変です。だからこそ、高くなるということです。

このように、徹底的にテストを行い、運用前にできるだけ多くの誤りを見つけ出すということを行います。さて、それが済んだら、ようやく運用に移ることになります。受け入れテストをクリアすると、そのソフトウェアを納品して、インストールし、日々の業務でそのソフトウェアを使っていくことになります。

運用を始めるにあたっては、操作研修を行ったり、ユーザーからの質問に対応したりします。これが運用です。そして、本番稼働中のソフトウェアに対してバグが見つかることもあります。ソフトウェアテストを徹底的に行ってから出荷しますが、ソフトウェアにバグがないということは基本的にありません。何かしらのバグは必ずあります。

ただし、重大なバグがあることを避けるのがソフトウェアテストの主な目的です。しかし、軽微なものも含めると、いろんなバグが残ってくることもあります。

稼働に入ってから、ソフトウェアのバグが見つかったり、前提としているOSがバージョンアップされ、それに合わせてソフトウェアを修正しなければならないこともあります。こういった作業をソフトウェアの保守と呼びます。

例えば、本番稼働中のソフトウェアに誤りが発生したので修正する、または税制が変更され、それに合わせて税金の計算プログラムを修正するといったことが行われます。

あるいは、ソフトウェアの修正に伴って設計時のドキュメントを修正するといったこともあります。こういった場合もソフトウェアの保守に該当します。ここまでの話で、企画、要件定義、開発、テスト、運用、保守の流れについて説明しました。

次は、ソフトウェアの開発手法について話を進めたいと思います。ソフトウェア開発手法とは、ソフトウェアをどのような手順で作っていくかという話です。

伝統的に、昔から行われているソフトウェア開発方法の一つにウォーターフォールモデルがあります。先ほど、要件定義、設計、開発、テスト、運用、保守といった話をしましたが、それを順番に実施していくという方式です。この方式では、要件定義や企画が最上流工程となり、設計が中流工程、開発やテストが下流工程となることが多いです。

ウォーターフォールモデルでは、滝のように段階的に水が流れる様子に例えられることもあります。上流から順にシステム開発が進んでいくというわけです。

この方法は伝統的によく使われてきたもので、特徴としては、全体のスケジュールが立てやすく、開発全体の進捗も把握しやすいという点があります。基本的に、開発工程ごとの作業が全て完了してから次の工程に進むという特徴があります。

例えば、要件定義が完了してから設計に進み、設計が完了してから開発に進むという形です。しかし、この方法で一番困るのは、設計を始めた後で、要件や仕様書の変更が発生した場合です。

なぜかというと、仕様書がフィックスされていることを前提に設計を進めていくため、その前提が狂うと、設計作業を再度やり直さなければならなくなります。これを手戻りと言います。したがって、手戻りが発生しないように、各工程が終了する際には綿密にチェックを行うことが求められます。

そのため、ウォーターフォールモデルでは手戻りが非常に嫌われることになります。しかし、ウォーターフォールモデルにも欠点が存在します。例えば、最初に仕様書を決めると、開発が始まった後に利用者が「仕様書を変更したい」と思っても、それはできません。もし仕様書を変更してしまうと、手戻りが発生し、開発コストが急激に増加してしまうことになります。このような欠点もウォーターフォールモデルにはあります。

さらに、最後の工程でミスが発生すると、一番最初の仕様書の段階に戻って修正しなければならなくなる場合もあります。これも大きな問題となり、ウォーターフォールモデルの最も大きな欠点です。

そのため、こうした問題を避けるために、最近ではウォーターフォールモデルではなく、アジャイル開発という方法が主流になりつつあります。アジャイル開発では、短い開発工程を何度も繰り返し、迅速かつ段階的に開発の完成度を高めていきます。

ウォーターフォールのように、例えば10階建てのビルを一気に建てるようなことはせず、百万行のプログラムを一気に作るようなこともしません。

アジャイルの場合、まずは小規模なプロトタイプを作成し、それが「こんな感じでいいですか？」と確認します。そのプロトタイプが完成したら、少しだけ改善を加えるという方法です。このように、少規模の開発を何度も繰り返して進めていきます。

短期間で開発が完了するため、例えば1回の開発期間が1ヶ月や1週間程度であるため、何か問題があれば「来週直しますね」と言うことができます。この方法がアジャイル開発の特徴です。

また、アジャイル開発では少人数のチームで小規模なソフトウェアの開発が前提となります。そのため、チーム内でのコミュニケーションを重要視し、ユーザーと協力して作業を進めます。ドキュメントよりもソフトウェアの作成を優先し、利用者のニーズの変化を素早く取り入れることが可能です。この点で、ウォーターフォールモデルと比較して手戻りの影響を小さくできます。

しかし、アジャイル開発には欠点もあります。例えば、全体のスケジュールが立てにくいことです。小さな開発から徐々に膨らませていくため、最終的なバージョンがいつ完成するのかが不明瞭になることがあります。

また、ユーザーの意見を聞くことは基本的には良いことですが、あまりにもユーザーの意見に引きずられすぎると、開発の方向性がブレてしまい、気がついたら全く異なるものに仕上がってしまうこともあります。

また、ここには書かれていませんが、例えば100万行や1000万行規模のソフトウェアをアジャイル開発で開発するのが適しているかというと、難しい場合もあります。このような点が欠点として挙げられます。しかし、ユーザーの意見を柔軟に取り入れられるという特徴があり、そのためアジャイル開発は非常に人気があります。

小規模なシステム開発には特に向いており、大規模開発にアジャイルを適用するのは通常はあまり推奨されません。

アジャイル開発の代表的な手法として、XP（エクストリームプログラミング）やスクラムが知られています。XPは、その名前の通り、非常に極端なプログラミング手法を取り入れています。イテレーションという短いサイクルを固定し、そのサイクルは1回数週間から長くても1ヶ月程度です。この期間内に動作するプログラムを作成し、そのサイクルを繰り返します。

XPの特徴として、2人1組でプログラミングを行うペアプログラミングがあります。一人がプログラムを打ち込み、もう一人がその内容をチェックします。時々、役割を交代しながら作業を進めます。

また、プログラムの動作を変更せずに内部の構造を改善すること、例えばアルゴリズムや設計の改善を行うリファクタリングが行われます。プログラムを書く前にテストケースを作成し、ソフトウェアテストの準備をしながら開発を進めるのも特徴です。

XPは非常に厳格なルールがあり、プロの間では非常に人気がありますが、ルールに従えない人も多いため、より緩やかな手法であるスクラムが好まれることもあります。

アジャイル開発の中で、通常はスクラム開発を指しますが、本物のプログラマーであれば、XP（エクストリームプログラミング）を採用したがることが多いです。この点を理解しておいてもらえると良いでしょう。XPでは、開発サイクルを「イテレーション」と呼んでいますが、スクラムでは「スプリント」と呼んでいます。スクラムでは、優先順位の高い機能から順に開発を進め、開発チームは毎朝ミーティングを開きます。このミーティングは「デイリースクラム」と呼ばれ、チーム内でのコミュニケーションを促進します。

このミーティングには、開発チームだけでなく、プロダクトオーナーやスクラムマスターといった責任者も参加します。このような仕組みになっています。

XPと比べると、スクラムのルールはあまり厳格ではありません。その分、効果は限定的な部分もありますが、導入がしやすいという大きなメリットがあります。そのため、スクラムは素人にも受け入れやすく、導入しやすい方法です。

ウォーターフォール開発は、企画からリリースまでを一回のパスで進めますが、アジャイル開発では、それを複数のイテレーションやスプリントに分け、繰り返し改善していきます。これがアジャイル開発の特徴です。

また、他の開発手法として、プロトタイピングやスパイラルモデルがあります。さらに、最近注目を集めているのがDevOpsで、開発部門と運用部門が協力しながらシステムの開発を進める方法です。

開発したシステムは、完成したらすぐに運用に回し、実際の運用でフィードバックを受け取り、それを次の日の開発に生かすという流れで進めていきます。もちろん、リスクはありますが、このデブオプスの方法を支援するためのツールが最近多く登場しています。

さらに、ソフトウェアの見積もりも重要な課題となっています。ソフトウェアは、何万行、何十万行、あるいは何百万行という規模になることが多く、例えばプログラマーを一人一ヶ月雇うと100万円程度かかるという話を先ほどしました。このような規模のソフトウェアを作ろうとすると、どのくらいの費用がかかるのでしょうか？

ソフトウェア業界では、1億円未満のプロジェクトは「小規模プロジェクト」と呼ばれ、10億円程度の規模であれば「中規模プロジェクト」とされます。そして、100億円を超えると大規模プロジェクトとみなされます。金額ベースで見ると、これらは大きなプロジェクトとなります。

たとえば、100億円のプロジェクトが見積もり通りに進まず、最終的に予算が200億円に膨れ上がった場合、それは単なる偶然では済まされません。ソフトウェア開発は一度きりのオリンピックのような特別なイベントではなく、継続的に行うものだからです。そのため、ソフトウェアの開発コストを正確に見積もることは非常に重要な仕事です。

そのための代表的な方法として、ファンクションポイント法があります。この方法は、ソフトウェアの仕様に基づき、機能の複雑さを定量化して、規模を見積もる手法です。ファンクションポイント法は、非常に系統的な方法として広く利用されています。

類推見積もり法は、以前のプロジェクトの規模を参考にして見積もりを行う方法です。例えば、以前は百万行のソフトウェアだったから、今回は少し追加して120万行くらいかな、といった感じです。この方法は、ある意味ではいい加減な部分もありますが、実際に使われることが多い手法です。

次に、ソフトウェアの見積もりを取る際によく使われる「人月工数」について説明します。例えば、一人で6ヶ月かかる作業を、3人で行えば約2ヶ月で完了するという考え方です。このように、何人で何ヶ月かかるかという作業量を元に、人を計測する単位として「人月」が使われます。

先ほど、プログラマーを一人雇うと1ヶ月で100万円かかると言いましたが、これを基に計算すると、一人で6ヶ月かかる作業は600万円、3人で2ヶ月かかる場合も同様に600万円となります。このような見積もりは、実際のプロジェクト計画で重要な参考になります。

さて、ここまででソフトウェア開発手法に関する話は終わりにし、次はプロジェクトマネジメントについてお話ししたいと思います。

プロジェクトマネジメントとは、目標を達成するために計画を立て、実行していくプロセスです。例えば、この絵にあるような受験勉強も、ひとつのプロジェクトとして考えることができます。目標（合格）を定め、それに向けて計画を立て、実行していくことが重要です。

一般的なプロジェクトの定義は、決められた期間内で独自の製品やサービスを作り出すことです。つまり、特定の目標を達成するための一連の取り組みがプロジェクトと呼ばれます。ソフトウェア開発やシステム開発もその一例です。

しかし、プロジェクトはそれだけに限りません。この絵に示されているように、受験勉強も一つのプロジェクトになります。入試に合格するという目標を立て、それに向けて模擬試験を受けたり、個別の教科の勉強を進めたりと、さまざまな活動を行いながら最終的な目標に向かって進んでいきます。

また、皆さんは大学生として、卒業要件である124単位を満たすために、日々単位を取得しています。これは、まさにプロジェクトの一部と言えます。卒業要件を達成するために、必要な科目の単位を取るために、毎学期履修計画を立て、履修登録を行い、授業に出席し、レポートを提出し、試験を受けるという活動をしています。実際、皆さんは日常的にプロジェクトに取り組んでいることになります。

さらに、サークル活動もプロジェクトの一例です。例えば、5月に試合がある場合、その試合に向けて準備を進める必要があります。勝利を目指して、具体的な計画を立て、トレーニングをしたり、作戦を練ったりすることが求められます。

このように、日常生活の中で行っているさまざまな活動が、実はプロジェクトとして考えられるのです。どんな活動も、目標に向かって計画的に進めることで、プロジェクトとして整理できることがわかります。

プロジェクトマネジメントの技術をうまく活用することで、成功する確率を高めることができます。したがって、ソフトウェア開発やシステム開発に限らず、一般的にこの技術は非常に重要なものとなります。

ソフトウェア開発やシステム開発を前提とすると、これらは非常に大規模なプロジェクトとなります。ソフトウェアは、1万行、10万行、100万行といった膨大な規模のプログラムから構成されており、一人の力では到底完成できません。

では、どうするかというと、プロジェクトチームを組織します。そして、そのチームにはリーダーが必要です。それがプロジェクトマネージャーとなります。プロジェクトマネージャーは、チームを管理し、このプロジェクトが成功するようにコスト、スケジュール、スコープ（作業範囲）などを考慮し、各メンバーに指示を出す役割を担います。もし、各人が勝手に行動していたら、チームとして機能しません。

プロジェクトマネージャーには多くの重要な仕事がありますが、その中でも特に重要なのが「プロジェクト検証」と呼ばれるものです。プロジェクト検証とは、プロジェクトの目的や期待される効果などを盛り込んだドキュメントで、これがプロジェクトの検証書になります。このドキュメントを作成し、プロジェクトメンバーに周知し、納得を得ることが、プロジェクトマネージャーにとって非常に重要な仕事です。

さらに、プロジェクトを成功させるためには多くの知識が必要ですが、これらの知識を体系化したものとして非常に有名なのが「ピンボック（PMBOK）」です。これはアメリカのプロジェクトマネジメント協会が提唱したもので、ソフトウェア開発だけでなく、建物の建設や土木工事、さらにはオリンピックなどの大規模なビッグプロジェクトにも適用されます。

皆さんの場合、卒業、受験勉強、あるいは就職活動などもプロジェクトと見なすことができます。これらをうまく成功させるために必要な知識をまとめたものが、「ピンボック」と呼ばれるものです。

では、このピンボックではどのような知識が重要とされているのでしょうか。以下にいくつかの項目を挙げます。統合マネジメントについては後でまとめて説明しますが、まずはスコープマネジメントです。これは、プロジェクトで取り組むべき範囲や仕事の範囲を明確にする必要があるというものです。これがスコープマネジメントです。

次にタイムマネジメントについて説明します。進捗管理や時間の管理を正しく行わないと、締め切りに間に合わなくなります。コストマネジメントは、予算の管理に関するものです。さらに品質マネジメントについても重要です。ソフトウェアには求められる品質があり、それを満たすためにソフトウェアテストを行い、そのテストで問題が見つかれば修正作業を行うなどの作業が発生します。

また、資源マネジメントも重要です。プロジェクトチームのメンバーを集めることも含まれます。人的資源だけでなく、物的資源、例えばコンピューターや部屋、ソフトウェアなども含まれます。これらの資源がどこまで利用できるかによって、計画に影響が出てきます。

最後にコミュニケーションマネジメントですが、これは発注者との間で適切なコミュニケーションを行わなければならないということです。ソフトウェア開発の場合、最終的に受け入れテストがありますが、ここで問題があるとその時点でプロジェクトは失敗します。そのため、効果的なコミュニケーションを行うことが非常に重要です。

次にリスクマネジメントについて説明します。最近よく「想定外の事態が起こりました」というセリフが使われますが、実際にはそのようなことが起こるのは本来避けるべきです。事前にどのような事態が起こり得るかを想定し、その場合にどうすべきかを考えて準備しておく必要があります。これがリスクマネジメントです。

次に調達マネジメントですが、これはプロジェクトチームだけで作業を行うのではなく、その一部を別の会社に外部調達するというものです。外部調達を行う場合、調達先を管理する必要があります。

また、ステークホルダーマネジメントはコミュニケーションマネジメントに近いものですので、ここでは省略しますが、様々な要素を考慮してプロジェクトを進めていく必要があります。これらの要素を総合的に考慮するのが、最初に説明した統合マネジメントです。

ここではスコープマネジメントについて少し触れていますが、先ほど説明した通りなので飛ばします。統合マネジメントでは、プロジェクトの制約条件、例えば予算や納期、スコープ（対象範囲）を総合的に調整し、管理することが求められます。これが統合マネジメントです。

次に、プロジェクトマネジメントの中でも特に重要とされるタイムマネジメントについて説明します。例えば、皆さんが先生からレポートを出題された場合、そのレポートには締め切りがあります。その締め切りに間に合うように、レポートを書き、課題をこなして、中身が正しいかどうかを確認し、提出する必要があります。時間を守ることは社会人の基本であり、そのための管理方法について説明するのが、このセクションです。

ここではアローダイアグラムについて説明しています。アローダイアグラムには、作業を表すa、b、c、d、e、fといったラベルがあり、それぞれが個別の作業を意味します。各作業の下には所要日数が記載されています。

例えば、作業aが完了しないと作業bは実行できません。作業には順序関係があり、この順序関係はアローダイアグラムの結合点で表現されます。さらに、作業bが完了しないと作業eはできないというように、順番に依存する関係が描かれています。

また、ダミー作業というのも存在します。例えば、2から4の間に矢印がありますが、これは作業aが完了しないと作業cが開始できないという意味です。このように、各作業の依存関係は非常に重要です。

例えば、作業c、d、eがすべて完了しないと作業fが実行できないという制約があります。これを具体例で言えば、レポート作成において、c、d、eの作業がすべて終了しない限り、レポートを提出することができないということです。

このように、作業の所要時間や順序関係はしっかりと把握しなければならず、それによってプロジェクト全体のスケジュール管理が成り立っています。

アローダイアグラムで示された作業の順序関係と所要日数が決まっている場合、例えば、作業Bはいつから始められるか、作業Cはいつから始められるかを計算で求めることができます。この計算で求められるのが「最早開始日」です。

逆に言うと、作業aが始まって30日経たないと作業Bはスタートできません。つまり、作業Bの担当者は、作業aが進行している30日の間に、もし作業aの担当でなければ他の作業を行っても良いということになります。

すべての先行作業が完了した後、最も早く次の作業を開始できる時点を求めることができ、こういった問題は情報処理試験でよく出題されます。したがって、しっかりと理解しておくべき重要なポイントです。

また、最遅開始日や締め切りに間に合わせるためには、どの作業をいつまでに始めなければならないかを求めることができます。これも同じように計算で求めることが可能です。具体的な計算方法については、教科書でじっくりと確認し、理解しておくことが大切です。

さらに、クリティカルパスについても説明します。クリティカルパスは、最早開始日と最遅開始日が等しい結合点を結んだ経路を指します。この経路に含まれる作業は、プロジェクトを推進する上で最も時間がかかる作業となり、遅れることがプロジェクト全体の遅れに直結するため、特に重要な部分となります。

クリティカルパスとして示されたのは、赤で示した「A、B、E、D、F」というパスです。このパスは、プロジェクトの中で最も時間がかかる経路であり、例えば最短で32日から22日かかる場合でも、最も効率的な場合で90日かかることが分かります。このように、最も時間がかかるパスを特定することが重要です。

また、プロジェクトの計画を表す方法として、ガントチャートがよく使用されます。横軸に日数を、縦軸に作業を取ったこのチャートでは、各作業の開始時期と終了時期を視覚的に示すことができます。システム設計、プログラム作成、設置工事、データベース移行、システムテスト、運用テストなど、各作業がどの時期に実施されるべきかを記入し、作業間の前後関係を考慮しながら作業期間を埋めていきます。

ガントチャートは、予定に対する実績を把握するのに非常に適しており、個人でのプロジェクト管理やグループでのプロジェクト管理にも広く使われる方法です。

次に、バンダウンチャートについて説明します。これは、残された時間と現在の進捗状況を視覚的に示すチャートです。アジャイル開発などでよく使用され、チーム全体で進行状況を確認し合うために用いられます。バンダウンチャートを使うことで、今どのくらい進捗しているのかを視覚的に把握できます。

最後に、ITサービスマネジメントとシステム監査についても触れます。どちらも非常に重要な分野であり、しっかりと説明していきたいと思います。

ITサービスマネジメントは、ソフトウェアやシステムの開発が終わり、運用が始まった後に、利用者に対して提供するサービスを管理するプロセスです。運用中に利用者に対してさまざまなサービスを提供し、そのサービスをうまく管理するためのマネジメントが求められます。例えば、サービスデスクを通じて、利用者のニーズに合わせてソフトウェアの運用を行うことが含まれます。

このプロセスを円滑に進めるためには、ベストプラクティスを集めたものに従うことが重要です。これを実現するためのフレームワークが「ITIL（Information Technology Infrastructure Library）」であり、これに従うことでサービス提供がうまくいくとされています。

ITサービスマネジメントの成功事例を集めたのが、エンタープライズITサービスマネジメントの実践です。その中で、最初に重要なのはサービスレベルの設定です。どの程度のサービスを提供するかを決定し、それに基づいて合意書を交わします。この合意書を「サービスレベルアグリーメント（SLA）」と呼びます。

SLAを結ぶことで、サービスを受ける側と提供する側の期待を明確にし、矛盾のない形で調整できます。サービスを受ける側の期待がどのようなものかを理解し、それに対して提供するサービスのレベルを明文化します。この明文化されたサービスレベルが高ければ、当然、料金も高くなりますが、予算内で提供できるサービスの内容をしっかりとドキュメント化し、合意を形成することが重要です。

また、サービス提供時間、稼働率の目標値、障害発生後の復旧時間なども明確に定めておく必要があります。

まず、サービスレベルマネジメントでは、サービス提供に関する合意事項を文書化することが重要です。この文書に基づいて実際のサービス提供を行うことで、トラブルが発生する可能性を減少させることができます。つまり、合意に従いサービスを提供することで、サービスの品質を維持し、問題の発生を未然に防ぐことができるのです。

また、利用者からの問い合わせに対する対応方法もさまざまです。FAQ、サービスデスク、AIチャットボットなど、さまざまな対応手段が考えられます。どの種類のサービスデスクを提供するかによって、サービスレベルや料金が変わることを理解する必要があります。利用者のインシデントに対する対応が重要で、インシデントとは、システムトラブルのことを指します。例えば、システムが正常に運用できなくなるような事態が発生した場合がインシデントに該当します。

インシデントが発生した場合、まずは原因を究明し、再発防止のための対策を講じることが基本です。しかし、場合によっては応急措置を講じることもあります。これがインシデント管理や問題管理、そして根本原因に対する対応といった業務に関わる部分です。さらに、変更管理、リリース管理、資産管理など、さまざまな業務が発生しますが、重要なのはこれらの管理業務を適切に行うことです。

次に、ファシリティマネジメントについてですが、これはサービスマネジメントとは異なり、施設や設備の管理に関するものです。コンピュータは電力で動作しているため、特に重要な施設には、コンピュータールームや自家発電装置、地震対策が施されていることがあります。例えば、病院のように絶対にコンピュータが停止してはならない施設では、これらの対策が必須です。

ファシリティマネジメントでは、施設や設備の管理を行います。特に、コンピュータシステムが電力で動作していることを考慮し、重要な施設ではコンピュータールームや自家発電装置、地震対策などが施されています。これらの対策を講じることで、システムが止まらないように管理することが求められます。

次に、システム監査について説明します。システム監査とは、情報システムが正しく運用されているかを第三者がチェックすることです。情報システムが開発され、運用が開始されても、利用者の意見が反映されないことがあります。このような場合に、システムの運用が適切に行われているか、リスクが適切にコントロールされているかを独立した第三者が監査します。システム監査を行うことで、システムが安定的に運用できるようになり、システムを提供している企業とユーザーとの間でトラブルが発生した場合、第三者が介入することで客観的にどちらの主張が妥当かを判断できるようになります。

このように、システム監査はトラブルを減らすために重要な役割を果たします。そのため、経済産業省はシステム管理基準やシステム監査基準を定めており、監査の計画を立て、予備調査、本調査、監査報告書の作成、フォローアップといった手順を踏んで行います。専門家が現状のサービスをチェックし、問題があれば改善点を指摘することで、システム運用の品質向上が図られます。

監査報告書には、改善を促すことが目的として含まれています。専門家がシステムをチェックする仕組みを通じて、情報システムの運用が適正に行われていることを確認できるようにすることが、監査の主な目的です。

以上のように、マネジメントに関する話題は多岐にわたり、非常に盛りだくさんだったと思いますが、今日の私の話はこれで終了とさせていただきます。